<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deployment on Home</title>
    <link>https://studymakesmehappy.club/tags/deployment/</link>
    <description>Recent content in Deployment on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 14 Feb 2018 01:05:40 +0800</lastBuildDate>
    
	<atom:link href="https://studymakesmehappy.club/tags/deployment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Speed Up Your Deployment Using Docker Compose</title>
      <link>https://studymakesmehappy.club/posts/speed-up-your-deployment-using-docker-compose/</link>
      <pubDate>Wed, 14 Feb 2018 01:05:40 +0800</pubDate>
      
      <guid>https://studymakesmehappy.club/posts/speed-up-your-deployment-using-docker-compose/</guid>
      <description>Docker 的出现，优秀的隔离性让我们可以将任何应用部署到任何服务器上面，不再需要关注服务器的环境配置，简化了单个应用的部署流程。但在更多的情况下，应用往往会依赖于其他服务，比如前端网页依赖于后端服务，后端服务依赖于数据库。我们可以依次部署每个服务，但每次重复的手工操作让人厌烦。我们需要一个工具，只要描述好整个应用之间的服务依赖关系，将这个描述文件交给这个工具，一条命令便能启动整个系统。这种类型的工具有很多，这篇博客里聊的是Docker Compose。
本文假设你有基本的 Docker 使用基础，你将会学习到以下几点：
 Docker Compose 是什么？它适用于哪些场景？ 安装和使用 Docker Compose 注入环境变量来配置你的程序 挂载磁盘来持久化你的容器数据  Overview Docker Compose 用于定义和运行多容器应用，它使用 YAML 文件来描述服务之间的依赖关系，一条简单的docker compose up命令便能启动你的整个应用。 Compose 多用于单主机部署，比如在本地电脑上搭建你的开发环境，CI／CD 服务器上搭建集成测试环境等简单场景。当然 Docker 官方说 Compose 也可以用于生产环境，只要你用 Swarm 就好了。但目前的情况是，Kubernetes 大行其道，Swarm 日渐式微，就连 Docker 官方也都迫不得已拥抱了 Kubernetes。现在生产环境多用 Kubernetes 来部署管理多容器应用，如果你对 Kubernetes 感兴趣，可以参考我之前的入门文章Kubernetes101。
我个人不是任何技术的信徒，每种技术都有它存在的道理。Docker Compose 简单方便，不需要花费精力部署调试 Kubernetes，适用于开发、测试以及个人的小应用场景；Kubernetes 成熟、自由、社区资源丰富，适用生产环境。建议大家可以亲自动手实践一下这两项技术，说实话，也花不了一晚上的时间。亲身体验之后，才能给技术恰如其分地归类，知道它们适用的场景，需要的时候顺手就用好了。
Setup Windows 和 Mac 下的 Docker 客户端自带 Docker Compose， Ubuntu 下直接apt install docker-compose即可
详情参考Install Docker Compose
Compose Up 以一个简单的 express app 为例</description>
    </item>
    
    <item>
      <title>Kubernetes101</title>
      <link>https://studymakesmehappy.club/posts/kubernetes101/</link>
      <pubDate>Sun, 07 Jan 2018 23:31:08 +0800</pubDate>
      
      <guid>https://studymakesmehappy.club/posts/kubernetes101/</guid>
      <description>这是一篇 kubernetes（简称 k8s，将中间的 8 个字母简写成“8”） 的基础教程，会使用实际例子来讲解 k8s 中的基础概念。
在这个教程中，假设你有基本的 Docker 使用基础，你将会学习到以下几点：
 搭建 k8s 集群 部署一个容器化的应用到集群中 通过 Service 暴露服务 通过 Replica 来伸缩服务实例 通过 Rolling Update 更新服务 Deployment, Pod, Node, Service 等相关的概念  安装 cli kubectl 是 k8s 的命令行工具，可以方便地管理集群
安装集群 有两种方式可以安装 k8s 集群
云上安装 k8s 如果你有多台云服务器，使用 rancher 来搭建 k8s 集群是一个方便快捷的选择。
一般来说，国外的解决方案在中国很可能出现水土不服的情况，需要额外参考这篇文章————原生加速中国区Kubernetes安装
额外，还需要注意以下几点:
 云服务器的名字不能过长，超过 63 个字符之后，会导致该节点无法注册成功。 需要使用和 rancher 兼容的 docker 版本，参考这个列表  搭建好集群之后，点击 UI 界面上的 kubernetes &amp;gt; cli &amp;gt; generate config，按照说明配置 kubectl ，即可将 kubectl 连接上 rancher 搭建的 k8s 集群</description>
    </item>
    
  </channel>
</rss>