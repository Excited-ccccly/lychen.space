<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ingress on </title>
    <link>http://excited-ccccly.github.io/studymakesmehappy.club/tags/ingress/</link>
    <description>Recent content in Ingress on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 27 Mar 2018 15:27:27 +0800</lastBuildDate>
    
	<atom:link href="http://excited-ccccly.github.io/studymakesmehappy.club/tags/ingress/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes Ingress</title>
      <link>http://excited-ccccly.github.io/studymakesmehappy.club/posts/kubernetes-ingress/</link>
      <pubDate>Tue, 27 Mar 2018 15:27:27 +0800</pubDate>
      
      <guid>http://excited-ccccly.github.io/studymakesmehappy.club/posts/kubernetes-ingress/</guid>
      <description>kubernetes101 介绍了 Kubernetes 的基本用法，通过 NodePort 的形式对外暴露 Service 来提供服务。
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE express-app NodePort 10.0.0.151 &amp;lt;none&amp;gt; 80:31530/TCP 19m kubernetes ClusterIP 10.0.0.1 &amp;lt;none&amp;gt; 443/TCP 1d 这时候可以使用 NodeIP:NodePort 来从外界访问这个服务，其中 192.168.99.100 是集群中任意一个 Node 节点的 IP
$ curl http://192.168.99.100:31530 hello world 但每次使用 IP+Port 访问服务的方式很不方便。在单机上，可以使用 nginx 的反向代理，实现通过域名访问服务。
nginx.conf
http { upstream my-api { server 127.0.0.1:8080; } server { listen 80; server_name api.domain.com; location / { proxy_pass http://my-api; } } } 启用 nginx 后，就可以通过访问 http://api.</description>
    </item>
    
  </channel>
</rss>